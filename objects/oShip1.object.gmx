<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = .05
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//define movement keys yo
Left = keyboard_check(ord('A')) 
Right = keyboard_check(ord('D'))
Up = keyboard_check(ord('W'))
Down = keyboard_check(ord('S'))

if ( Right ) { image_angle -= 3 }

if ( Left ) { image_angle += 3 }

if ( Up ) { motion_add( image_angle,.1 ) }

if ( Down ) { speed = speed * .9 }

if collision_circle(Planet.x,Planet.y,64,id,true,false) {

speed = 0

}

//with (oPlanet) { with (other) { motion_add(point_direction(x,y,other.x,other.y,),.1) } }

///*



ScGravity()

//collision    
if place_meeting(x,y,oPlanet) {

if speed &gt; 20 { instance_destroy() } else {
    
    
    
    
    
}





}

instance_create(x,y,oTrail)
    
//*/

/*
with (oPlanet) {
    
    with (other) {
        
        var dis;
        dis = distance_to_object(other)
        global.maxdis = 100
        var grav;
        //grav = ((dis) / global.maxdis) * mass
        grav = ((( global.maxdis ) / dis ) * mass) * .001
        motion_add(point_direction(x,y,other.x,other.y,),grav)
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

if (Up) { draw_sprite_ext(sThrust3,0,x,y,1,1,image_angle,c_red,255) }

//if (Left) { draw_sprite_ext(sThrust1,0,x,y,1,1,image_angle,c_red,255) }

//if (Right) { draw_sprite_ext(sThrust2,0,x,y,1,1,image_angle,c_red,255) }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
