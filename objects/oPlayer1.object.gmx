<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init
image_speed = .25
vsp = 0
hsp = 0
//tweakables
Term = 10
Gravity = .1
MoveSpeed = 4




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nearest planet

//PHsp
//PVsp

if instance_exists(oPlanet) {

Planet = instance_nearest(x,y,oPlanet)

} else { Planet = noone }

Down = point_direction(Planet.x,Planet.y,x,y)

image_angle = Down

if ( global.debug ) { if mouse_check_button(mb_any) { x = mouse_x y = mouse_y } }

if place_meeting(x + hsp,y + vsp,Planet) {



vsp = 0

} else {
    
    //Gravity
    if vsp &lt; Term {
    
        vsp += Gravity
    
    }
    
}

//define movement keys yo
Left = keyboard_check(ord('A')) 
Right = keyboard_check(ord('D'))
Jump = keyboard_check_pressed(ord('W'))

//if i'm moving change my hsp
if (Left) { hsp = MoveSpeed }
if (Right) { hsp = -MoveSpeed }

//if i'm not moving stop my hsp (prevents you walking into orbit)
if Left != true and Right != true { hsp = 0 image_speed = 0 image_index = 0 } else { image_speed = .25 }

//jumping
if (Jump) and distance_to_point(Planet.x,Planet.y) &lt; 64 {

vsp = -3


}


//apply speed

    //figure out where my vsp wants me to go
    nvx = lengthdir_x(vsp,Down)  
    nvy = lengthdir_y(vsp,Down)
    //figure out where my hsp wants me to go
    if sign(hsp) = 1 {
    nhx = lengthdir_x(hsp,Down + 85)  
    nhy = lengthdir_y(hsp,Down + 85)  
    } else {
    nhx = lengthdir_x(hsp,Down + 95)  
    nhy = lengthdir_y(hsp,Down + 95) 
    }
    //Take my hsp and vsp's demands and factor them together, and then finnally actually apply speed
    x += nhx - nvx
    y += nhy - nvy
    
    

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
