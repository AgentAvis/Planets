<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlanet3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
randomize()

//color = make_colour_hsv(random(255), random(255), 255)

hue = random(255)
sat = random(255)
val = random(255)

color1 = make_colour_hsv(hue,sat,val)
//color2 = make_colour_hsv(100,000,100)
color2 = color1

image_blend = color1
ran = 1000

//sprite
index = ceil(random(3)) 

if index = 1 { sprite_index = sPlanet1 }
if index = 2 { sprite_index = sPlanet2 }
if index = 3 { sprite_index = sPlanet3 }

C = c_red

//set the backround
br = ceil(random(7))
if br = 1 { background_index[0]= b1 }
if br = 2 { background_index[0]= b2 }
if br = 3 { background_index[0]= b3 }
if br = 4 { background_index[0]= b4 }
if br = 5 { background_index[0]= b5 }
if br = 6 { background_index[0]= b6 }
if br = 7 { background_index[0]= b7 }

p = false

dg = false

px = x
py = y
nx = 0
ny = 0
HSpeed = 0
VSpeed = 0
Orbit = 0
Direction = 0
distance = false


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = image_xscale

if dg {ScGravity()}

if (p) {
    
    n = instance_nearest(x,y,oPlanet)
    if place_meeting(x,y,oPlanet) {
        
        if random (10) &lt; 1 {
            x = random_range(100,room_width-100)
            y = random_range(100,room_height-100)
        }
            
    } else { p = false ScSpawnPlayer() }
   
    

}
/*
if px != x or py != y 
{

if distance = false { distance = distance_to_point(px,py) } 


//Direction = point_direction(x,y,px,py)

Direction = image_angle

image_angle += 1

nx = px + lengthdir_x(distance,Direction)

ny = py + lengthdir_y(distance,Direction)

//oldx = x
//oldy = y

x = nx

y = ny

//newx = x
//newy = y
//HSpeed = newx - oldx
//VSpeed = newy - oldy


}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()*
/*

if (global.debug) { draw_circle(x,y,64*image_xscale,true) } else {
    
    draw_set_alpha(1);
    if sprite_index = sPlanet3 {
    C = make_colour_hsv(29,71.2,228.1)
    }
    if sprite_index = sPlanet2 {
    C = make_colour_hsv(91,130,100)
    }
    if sprite_index = sPlanet1 {
    C = make_colour_hsv(34,4.1,80)
    }
    draw_circle_colour(x,y,64*image_xscale,C,C,false)
    
    draw_circle_colour(x,y,64*image_xscale ,c_black,c_black,true)
    draw_sprite_ext(sprite_index,0,x,y,image_xscale * .9,image_yscale * .9,0,c_white,1)
}
*/

    draw_set_alpha(1);
    if sprite_index = sPlanet3 {
    C = make_colour_hsv(29,71.2,228.1)
    }
    if sprite_index = sPlanet2 {
    C = make_colour_hsv(91,130,100)
    }
    if sprite_index = sPlanet1 {
    C = make_colour_hsv(34,4.1,80)
    }
    draw_circle_colour(x,y,64*image_xscale,C,C,false)
    
    draw_circle_colour(x,y,64*image_xscale ,c_black,c_black,true)
    draw_sprite_ext(sprite_index,0,x,y,image_xscale * .9,image_yscale * .9,0,c_white,1)
draw_point(px,py)
//draw_set_color(c_white)
//draw_circle(x,y,750,true)
//draw_circle(x,y,900,true)
//draw_circle(x,y,800,true)
//draw_circle(x,y,700,true)
//draw_circle(x,y,600,true)
//draw_circle(x,y,500,true)
//draw_circle(x,y,400,true)
//draw_circle(x,y,300,true)
//draw_circle(x,y,200,true)
//draw_circle(x,y,100,true)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
