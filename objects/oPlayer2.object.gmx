<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite19_Andre</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tweakables
Term = 10
Gravity = .1
MoveSpeed = 4
color = c_red

//init
image_speed = .25
vsp = 0
hsp = 0
//image_blend = color
draw = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nearest planet

//PHsp
//PVsp

if instance_exists(oPlanet) {

Planet = instance_nearest(x,y,oPlanet)

} else { Planet = noone }

Down = point_direction(Planet.x,Planet.y,x,y)

image_angle = Down

if ( global.debug ) { if mouse_check_button(mb_any) { x = mouse_x y = mouse_y } }

//if place_meeting(x + hsp,y + vsp,Planet) {

if collision_circle(Planet.x,Planet.y,Planet.mass * 64,id,true,false) {


vsp = 0

} else {
    
    //Gravity
    if vsp &lt; Term {
    
        vsp += Gravity
    
    }
    
}

//define movement keys yo
    Left = keyboard_check(ord('A')) 
    Right = keyboard_check(ord('D'))
    Jump = keyboard_check_pressed(ord('W'))

//if i'm not playing i can't move
if global.focus = id {
    
ScWalk()
ScJump()

    //arrows yo
    
    
    if mouse_check_button_pressed(mb_left) { 
    
    draw = true
     
       }
    
    if mouse_check_button_released(mb_left) and draw = true {
    
    draw = false
    
    Arrow = instance_create(x,y,oArrow)
    Arrow.color = color
    Arrow.direction = point_direction(x,y,mouse_x,mouse_y)
    Arrow.image_angle = Arrow.direction
    Arrow.sprite_index = sPepsi
    
    var charge;
    charge = (distance_to_point(mouse_x,mouse_y) / 200 )
    
    if charge &lt; 1 {
        Arrow.speed = charge * 20
    } else {
        Arrow.speed = 20
    }
    
    if instance_exists(oPlayer3) { global.focus = oPlayer3.id } else {
    
    if instance_exists(oPlayer4) { global.focus = oPlayer4.id } else {
    
    if instance_exists(oPlayer1) { global.focus = oPlayer1.id } else {
    }}}
    }

}
ScSpeeds()





    
    

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

if (draw) {

var col1;
col1 = color
var col2;
col2 = c_black

if distance_to_point(mouse_x,mouse_y) &gt; 200 {
//lengthdir mumbo jumbo

var ptdir;
ptdir = point_direction(x,y,mouse_x,mouse_y)

xdir = x + lengthdir_x(200,ptdir)
ydir = y + lengthdir_y(200,ptdir)

draw_line_width_colour(x,y,xdir,ydir,4,col1,col2)

} else {

draw_line_width_colour(x,y,mouse_x,mouse_y,4,col1,col2)

}
//Tar = instance_create(x,y,oAim)
//Tar.color = color
//Tar.direction = point_direction(x,y,mouse_x,mouse_y)
//Tar.image_angle = Tar.direction
//Tar.speed = 20

}

if mouse_check_button_released(mb_left) {

with (oAim) { instance_destroy() } 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
